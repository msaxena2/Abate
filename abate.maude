fmod ABATE-STATE is
  protecting META-LEVEL .
  sort State .
  sorts   SubState   SubStates .
  subsort SubState < SubStates .

  sorts Tag Contents .
  op empty :                     -> SubState  [ctor] .
  op _@_   : Contents Tag        -> SubStates [ctor] .
  op _|_   : SubStates SubStates -> SubStates [assoc comm id: empty] .
  op {_}   : SubStates           -> State     [ctor] .
endfm


fmod ABATE-PIPELINE
  is protecting ABATE-STATE .

  sorts   PipelineStep PipelineSteps .

  subsort PipelineStep  < PipelineSteps .
  subsort PipelineSteps < Contents .

  op #empty   : -> PipelineStep [ctor] .
  op #done    : -> PipelineStep [ctor] .
  op _ &p _ : PipelineSteps PipelineSteps -> PipelineSteps [assoc id: #empty] .
  op pipeline     : -> Tag [ctor] .


  op #empty   : -> PipelineStep [ctor] .
  op #done    : -> PipelineStep [ctor] .


  --- Replacement for the original ugly
  --- op { _ | _ | _ | _ | _ | _ } :
  ---   PipelineSteps Module TermSet TermSet RuleSet LabeledRuleSet -> State [ctor] .

endfm


fmod ABATE-FIND-RULES
  is protecting ABATE-PIPELINE .

   sorts LabeledRulePair LabeledRuleSet TermSet .

   subsort LabeledRulePair < LabeledRuleSet < Contents .
   subsort Term            < TermSet        < Contents .
   subsort Module          < Contents .

   --- This inclusion causes problems, so we improvise.
   subsort Rule < RuleSet  < Contents .


   --- op fmodule       : -> Tag [ctor] .
   --- op seenTerms    : -> Tag [ctor] .
   --- op termQueue    : -> Tag [ctor] .
   --- op goodRules    : -> Tag [ctor] .
   --- op labeledRules : -> Tag [ctor] .


   --- op emptyTermSet :                 -> Term    [ctor] .
   --- op _&ts_        : TermSet TermSet -> TermSet [assoc comm id: emptyTermSet] .

   --- op #labelRules : -> PipelineStep [ctor] .

   --- op (_,_)              : Nat Rule -> LabeledRulePair [ctor] .
   --- op emptyLabelRulePair :          -> LabeledRulePair [ctor] .

   --- op _&lrs_ : LabeledRuleSet LabeledRuleSet -> LabeledRuleSet
   ---                                              [assoc comm id: emptyLabelRulePair] .

   --- op labelRules(_,_) : Nat RuleSet -> LabeledRuleSet [ctor] .

   --- var R : Rule .  var Rs : RuleSet .  var N : Nat .

   --- eq labelRules(N, none) = emptyLabelRulePair .
   --- eq labelRules(N, R Rs) = (N, R) &lrs labelRules(s(N), Rs) .

   --- var P : PipelineStep . var Ps : PipelineSteps .
   --- var Ss : SubStates . var M : Module .

   --- eq { ((#labelRules &p Ps ) @ pipeline) | (M @ fmodule) | (emptyLabelRulePair @ labeledRules) | Ss }
   ---  = { (Ps @ pipeline) | (M @ fmodule ) | ( labelRules(0, getRls(M)) @ labeledRules) | Ss } .
endfm

--- fmod ABATE-FIND-RULES-AUX
---   is protecting ABATE-FIND-RULES .
---
---   op findProblemRules(_,_)    : Module Term -> RuleSet .
---   op problemRulesFromState(_) : State       -> RuleSet .
---
---   var M : Module . var T : Term .
---   eq findProblemRules(M, T) = problemRulesFromState(
---                                   {   ((#labelRules &p #done) @ pipeline )
---                                     | (M                      @ fmodule)
---                                     | (emptyLabelRulePair     @ labeledRules)
---                                     | (T                      @ seenTerms)
---                                     | (none                   @ goodRules)
---                                     | (emptyLabelRulePair     @ labeledRules)
---                                   }) .
---
--- endfm


