mod ABATE-STATE is

  sort State .
  sorts   SubState   SubStates .
  subsort SubState < SubStates .

  sorts Tag Contents .
  op emptySubstate :                     -> SubState  [ctor] .
  op _@_           : Contents Tag        -> SubStates [ctor] .
  op _|_           : SubStates SubStates -> SubStates [ctor assoc comm id: emptySubstate format(s n s n)] .
  op {_}           : SubStates           -> State     [ctor format(nss n n ssn)] .

endm


mod ABATE-PIPELINE
  is extending ABATE-STATE .

  sorts   PipelineStep PipelineSteps .

  subsort PipelineStep  < PipelineSteps .
  subsort PipelineSteps < Contents .

  op #empty   : -> PipelineStep [ctor] .
  op #done    : -> PipelineStep [ctor] .
  op _ &p _ : PipelineSteps PipelineSteps -> PipelineSteps [assoc id: #empty] .
  op pipeline     : -> Tag [ctor] .


  op #empty   : -> PipelineStep [ctor] .
  op #done    : -> PipelineStep [ctor] .
endm

mod ABATE-META-LEVEL
  is protecting META-LEVEL * ( op getName : Module          -> Qid to getModuleName
                             , op __      : RuleSet RuleSet -> RuleSet to _&rs_ [format(d ni d d)]
                             , op none    :                 -> RuleSet to emptyRuleSet ) .

endm

mod ABATE-FIND-RULES
  is extending ABATE-PIPELINE .
     protecting ABATE-META-LEVEL .

   sorts LabeledRulePair LabeledRuleSet TermSet .

   subsort LabeledRulePair < LabeledRuleSet < Contents .
   subsort Term < TermSet < Contents .
   subsort RuleSet < Contents .
   subsort Module < Contents .

   op module       : -> Tag [ctor] .
   op seenTerms    : -> Tag [ctor] .
   op termQueue    : -> Tag [ctor] .
   op goodRules    : -> Tag [ctor] .
   op labeledRules : -> Tag [ctor] .


   op emptyTermSet :                 -> TermSet [ctor] .
   op _&ts_        : TermSet TermSet -> TermSet [assoc comm id: emptyTermSet] .

   op #labelRules : -> PipelineStep [ctor] .

   op (_,_)              : Nat Rule -> LabeledRulePair [ctor] .
   op emptyLabelRulePair :          -> LabeledRulePair [ctor] .

   op _&lrs_ : LabeledRuleSet LabeledRuleSet -> LabeledRuleSet
                                                [assoc comm id:
                                                emptyLabelRulePair format(t ns d d)] .

   op labelRules(_,_) : Nat RuleSet -> LabeledRuleSet [ctor] .

   var R : Rule . var N : Nat . var RS : RuleSet .

   eq labelRules(N, emptyRuleSet) = emptyLabelRulePair .
   eq labelRules(N, R &rs RS)     = (N, R) &lrs labelRules(s(N), RS) .

   var P : PipelineStep . var Ps : PipelineSteps .
   var Ss : SubStates . var M : Module  .

    rl  {  ((#labelRules &p Ps )     @ pipeline)
         | (M                        @ module)
         | (emptyLabelRulePair       @ labeledRules)
         | Ss }
     => {  (Ps                       @ pipeline )
         | (M                        @ module )
         | (labelRules(0, getRls(M)) @ labeledRules )
         | Ss } .
endm

mod ABATE-FIND-RULES-AUX
  is protecting ABATE-FIND-RULES .

  op findProblemRules(_,_)    : Module Term -> RuleSet .
  op problemRulesFromState(_) : State       -> RuleSet .

  var M : Module . var T : Term .
  eq findProblemRules(M, T) = problemRulesFromState(
                                  {   ((#labelRules &p #done) @ pipeline )
                                    | (M                      @ module)
                                    | (emptyLabelRulePair     @ labeledRules)
                                    | (T                      @ seenTerms)
                                    | (emptyRuleSet           @ goodRules)
                                    | (emptyLabelRulePair     @ labeledRules)
                                  }) .

endm

